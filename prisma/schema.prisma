generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  username          String?           @unique
  email             String            @unique
  PhoneNumber       String?           @unique
  passwordHash      String?
  firstName         String?
  lastName          String?
  googleId          String?           @unique
  profilePictureUrl String?
  location          String?
  Gender            String?
  Skills            String[]
  Interests         String[]
  workorProject     String?
  About             String?
  college           String?
  degree            String?
  startYear         Int?
  endYear           Int?
  verified          Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isOnline          Boolean           @default(false)
  lastSeen          DateTime?
  status            String            @default("available")
  class10Board      String?
  class12Board      String?
  headline          String[]
  anonymousChats1   AnonymousChat[]   @relation("AnonymousChatUser1")
  anonymousChats2   AnonymousChat[]   @relation("AnonymousChatUser2")
  blogs             Blogs[]
  CloudinaryMedia   CloudinaryMedia[]
  Comments          Comments[]
  connections1      Connection[]      @relation("UserConnections1")
  connections2      Connection[]      @relation("UserConnections2")
  GroupMember       GroupMember[]
  groupMessages     GroupMessage[]    @relation("GroupMessageSender")
  Likes             Likes[]
  receiverMessages  Message[]         @relation("receiverMessages")
  senderMessages    Message[]         @relation("senderMessages")
  otps              Otp[]
  posts             Post[]
  Share             Share[]
  UserActivity      UserActivity[]
  experiences       Experience[]
}

model Otp {
  id        String   @id @default(uuid())
  userId    String
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Comments {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Likes {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model Share {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Post {
  id         String     @id @default(uuid())
  content    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  postType   String     @default("text")
  userId     String
  visibility String     @default("public")
  tags       String[]
  location   String?
  mediaUrl   String[]
  Comments   Comments[]
  Likes      Likes[]
  user       User       @relation(fields: [userId], references: [id])
  Share      Share[]

  @@index([content, tags], map: "PostContentTagsIndex")
}

model Connection {
  id        String   @id @default(uuid())
  userId1   String
  userId2   String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  user1     User     @relation("UserConnections1", fields: [userId1], references: [id])
  user2     User     @relation("UserConnections2", fields: [userId2], references: [id])

  @@unique([userId1, userId2])
}

model Message {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())
  senderId   String
  receiverId String
  receiver   User     @relation("receiverMessages", fields: [receiverId], references: [id])
  sender     User     @relation("senderMessages", fields: [senderId], references: [id])

  @@unique([senderId, receiverId, createdAt])
}

model Group {
  id          String         @id @default(uuid())
  name        String
  description String?
  isPrivate   Boolean        @default(false)
  createdAt   DateTime       @default(now())
  members     GroupMember[]
  messages    GroupMessage[]
}

model GroupMember {
  id       String   @id @default(uuid())
  userId   String
  groupId  String
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
}

model GroupMessage {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  senderId  String
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id])
  sender    User     @relation("GroupMessageSender", fields: [senderId], references: [id])
}

model UserActivity {
  id           String   @id @default(uuid())
  userId       String
  activityType String
  targetId     String?
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}

model Blogs {
  id           String   @id @default(uuid())
  title        String   @db.VarChar(255)
  description  String?
  content      String
  titlePhoto   String?
  contentVideo String[]
  mediaUrl     String[]
  authorId     String
  published    Boolean  @default(false)
  views        Int      @default(0)
  likes        Int      @default(0)
  tags         String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  author       User     @relation(fields: [authorId], references: [id])

  @@index([title])
  @@index([authorId])
  @@index([createdAt])
}

model CloudinaryMedia {
  id           String   @id @default(uuid())
  publicId     String
  url          String
  resourceType String
  createdAt    DateTime @default(now())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
}

model AnonymousChat {
  id        String             @id @default(uuid())
  userId1   String
  userId2   String
  status    String             @default("active")
  createdAt DateTime           @default(now())
  endedAt   DateTime?
  user1     User               @relation("AnonymousChatUser1", fields: [userId1], references: [id])
  user2     User               @relation("AnonymousChatUser2", fields: [userId2], references: [id])
  messages  AnonymousMessage[]

  @@unique([userId1, userId2])
}

model AnonymousMessage {
  id        String        @id @default(uuid())
  content   String
  senderId  String
  isUser1   Boolean
  createdAt DateTime      @default(now())
  chatId    String
  chat      AnonymousChat @relation(fields: [chatId], references: [id])
}

model Experience {
  id              String   @id @default(uuid())
  title           String
  organizationName String
  location        String?
  locationType    String?
  description     String?
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
