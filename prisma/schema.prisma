generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  username          String?           @unique
  email             String            @unique
  PhoneNumber       String?           @unique
  passwordHash      String?
  firstName         String?
  lastName          String?
  googleId          String?           @unique
  profilePictureUrl String?
  headline          String?
  location          String?
  Gender            String?
  Skills            String[]
  Interests         String[]
  workorProject     String?
  About             String?
  college           String?
  degree            String?
  startYear         Int?
  endYear           Int?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  otps              Otp[]
  bookmarks         Bookmark[]
  posts             Post[]
  connections1      Connection[]      @relation("UserConnections1")
  connections2      Connection[]      @relation("UserConnections2")
  senderMessages    Message[]         @relation("senderMessages")
  receiverMessages  Message[]         @relation("receiverMessages")
  groupMessages     GroupMessage[]    @relation("GroupMessageSender")
  GroupMember       GroupMember[]
  UserActivity      UserActivity[]
  Share             Share[]
  Comments          Comments[]
  verified          String
  Likes             Likes[]
  CloudinaryMedia   CloudinaryMedia[]
}

model Otp {
  id        String   @id @default(uuid())
  userId    String
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Comments {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Likes {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Share {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])
}

model Post {
  id         String     @id @default(uuid())
  content    String
  mediaUrl   String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  postType   String     @default("text")
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  visibility String     @default("public")
  tags       String[]
  location   String?
  Share      Share[]
  Comments   Comments[]
  Likes      Likes[]

  @@index([content, tags], map: "PostContentTagsIndex")
}

model Connection {
  id        String   @id @default(uuid())
  user1     User     @relation("UserConnections1", fields: [userId1], references: [id])
  user2     User     @relation("UserConnections2", fields: [userId2], references: [id])
  userId1   String
  userId2   String
  status    String   @default("pending")
  createdAt DateTime @default(now())

  @@unique([userId1, userId2])
}

model Message {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())
  sender     User     @relation("senderMessages", fields: [senderId], references: [id])
  receiver   User     @relation("receiverMessages", fields: [receiverId], references: [id])
  senderId   String
  receiverId String

  @@unique([senderId, receiverId, createdAt])
}

model Group {
  id          String         @id @default(uuid())
  name        String
  description String?
  isPrivate   Boolean        @default(false)
  createdAt   DateTime       @default(now())
  members     GroupMember[]
  messages    GroupMessage[]
}

model GroupMember {
  id       String   @id @default(uuid())
  userId   String
  groupId  String
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
}

model GroupMessage {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  sender    User     @relation("GroupMessageSender", fields: [senderId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  senderId  String
  groupId   String
}

model UserActivity {
  id           String   @id @default(uuid())
  userId       String
  activityType String
  targetId     String?
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}

model Book {
  id          String     @id @default(uuid())
  title       String
  author      String
  description String?    @db.Text
  coverUrl    String?
  pdfUrl      String?
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  String
  views       Int        @default(0)
  bookmarks   Bookmark[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([categoryId])
  @@index([title])
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?  @db.Text
  books       Book[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Bookmark {
  id        String   @id @default(uuid())
  page      Int
  note      String?  @db.Text
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookId])
  @@index([userId])
}

model CloudinaryMedia {
  id           String   @id @default(uuid())
  publicId     String
  url          String
  resourceType String
  createdAt    DateTime @default(now())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
}
