services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${TARGET:-production} # Use 'builder' for development, 'production' for prod
    image: uniisphere-app:${TAG:-latest}
    container_name: uniisphere-app
    ports:
      - "${PORT:-8000}:8000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-8000}
    env_file:
      - .env.${NODE_ENV:-production}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:8000/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 1G
    restart: unless-stopped
    networks:
      - uniisphere-network

  db:
    image: postgres:15-alpine
    container_name: uniisphere-db
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-uniisphere}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - uniisphere-network

  redis:
    image: redis:7-alpine
    container_name: uniisphere-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis}
    volumes:
      - redis_data:/data
    healthcheck:
      test:
        ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD:-redis} ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - uniisphere-network

volumes:
  postgres_data:
    name: uniisphere_postgres_data
  redis_data:
    name: uniisphere_redis_data

networks:
  uniisphere-network:
    name: uniisphere_network
    driver: bridge

